package tree;

/*
 * breadth for search (BFS) -> preoder, inorder & postorder
deapth for search (DFS)  -> levelorder

*/

public class BinarySeachTree {

	public BNode root;
	
	public BinarySeachTree() {
		root = null;
	}
	
	public static void main(String[] args) {
		BinarySeachTree bst = new BinarySeachTree();
		BNode n1 = new BNode();
		n1.data = "N1";
		BNode n2 = new BNode();
		n2.data = "N2";
		BNode n3 = new BNode();
		n3.data = "N3";
		BNode n4 = new BNode();
		n4.data = "N4";
		BNode n5 = new BNode();
		n5.data = "N5";
		BNode n6 = new BNode();
		n6.data = "N6";
		BNode n7 = new BNode();
		n7.data = "N7";
		BNode n8 = new BNode();
		n8.data = "N8";
		BNode n9 = new BNode();
		n9.data = "N9";
		n1.left = n2;
		n1.right = n3;
		n2.left = n4;
		n2.right = n5;
		n4.right = n9;
		n4.left = n8;
		n3.left = n6;
		n3.right = n7;
		bst.root = n1;
		bst.preOrder(bst.root);
	}
	
	public void preOrder(BNode node) {
		if(node == null) return;
		
		System.out.print(node.data + " ");
		preOrder(node.left);
		preOrder(node.right);
	}
	
	public void inOrder(BNode node) {
		if(node == null) return;
		
		inOrder(node.left);
		System.out.print(node.data + " ");
		inOrder(node.right);
	}
	
	public void postOrder(BNode node) {
		if(node == null) return;
		
		postOrder(node.left);
		postOrder(node.right);
		System.out.print(node.data+ " ");
	}

}

class BNode { // binary node
	public String data;
	public BNode left;
	public BNode right;
	public int height;
}
